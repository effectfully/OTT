{-# OPTIONS --no-termination-check #-}

module OTT.Tele.Coerce where

open import OTT.Prelude
open import OTT.Tele.Core

Coerce : ∀ {k₁ k₂} -> ⟦ k₁ ≟ᵇ k₂ ⟧ -> Univ k₁ -> Univ k₂
Coerce {false} {false} _  A = A
Coerce {true } {true } _  A = A
Coerce {false} {true } () A
Coerce {true } {false} () A

mutual
  coerce : ∀ {k s} {A : Univ k} {B : Univ s} -> ⟦ A ≈ B ⇒ A ⇒ B ⟧
  coerce {false} {false} (f , _) = f
  coerce {true } {true }  q      = coerce′ q
  coerce {false} {true }  ()
  coerce {true } {false}  ()

  coerce′ : ∀ {k s} {A : Univ k} {B : Univ s} -> ⟦ A ≃ B ⇒ A ⇒ B ⟧
  coerce′ {A = bot        } {bot        } q ()
  coerce′ {A = top        } {top        } q _  = _
  coerce′ {A = unit       } {unit       } q _  = _
  coerce′ {A = nat        } {nat        } q n  = n
  coerce′ {A = univ k₁    } {univ k₂    } q A  = Coerce q A
  coerce′ {A = σ A₁ B₁    } {σ A₂ B₂    } q p  = let q₁ , q₂ = q ; x , y = p in
    coerce q₁ x , coerce (q₂ x (coerce q₁ x) (coherence q₁ x)) y
  coerce′ {A = π A₁ B₁    } {π A₂ B₂    } q f  = let q₁ , q₂ = q in
    λ x -> coerce (q₂ (coerce q₁ x) x (coherence q₁ x)) (f (coerce q₁ x))
  coerce′ {A = list A₁    } {list A₂    } q xs = lmap (coerce q) xs
  coerce′ {A = tele A₁    } {tele A₂    } q t  = coerceTele q t
  coerce′ {A = rose cs₁ i₁} {rose cs₂ i₂} q r  = coerceRose q r
  coerce′ {A = bot     } {top     } ()
  coerce′ {A = bot     } {unit    } ()
  coerce′ {A = bot     } {nat     } ()
  coerce′ {A = bot     } {univ _  } ()
  coerce′ {A = bot     } {σ _ _   } ()
  coerce′ {A = bot     } {π _ _   } ()
  coerce′ {A = bot     } {list _  } ()
  coerce′ {A = bot     } {tele _  } ()
  coerce′ {A = bot     } {rose _ _} ()
  coerce′ {A = top     } {bot     } ()
  coerce′ {A = top     } {unit    } ()
  coerce′ {A = top     } {nat     } ()
  coerce′ {A = top     } {univ _  } ()
  coerce′ {A = top     } {σ _ _   } ()
  coerce′ {A = top     } {π _ _   } ()
  coerce′ {A = top     } {list _  } ()
  coerce′ {A = top     } {tele _  } ()
  coerce′ {A = top     } {rose _ _} ()
  coerce′ {A = unit    } {bot     } ()
  coerce′ {A = unit    } {top     } ()
  coerce′ {A = unit    } {nat     } ()
  coerce′ {A = unit    } {univ _  } ()
  coerce′ {A = unit    } {σ _ _   } ()
  coerce′ {A = unit    } {π _ _   } ()
  coerce′ {A = unit    } {list _  } ()
  coerce′ {A = unit    } {tele _  } ()
  coerce′ {A = unit    } {rose _ _} ()
  coerce′ {A = nat     } {bot     } ()
  coerce′ {A = nat     } {top     } ()
  coerce′ {A = nat     } {unit    } ()
  coerce′ {A = nat     } {univ _  } ()
  coerce′ {A = nat     } {σ _ _   } ()
  coerce′ {A = nat     } {π _ _   } ()
  coerce′ {A = nat     } {list _  } ()
  coerce′ {A = nat     } {tele _  } ()
  coerce′ {A = nat     } {rose _ _} ()
  coerce′ {A = univ _  } {bot     } ()
  coerce′ {A = univ _  } {top     } ()
  coerce′ {A = univ _  } {unit    } ()
  coerce′ {A = univ _  } {nat     } ()
  coerce′ {A = univ _  } {σ _ _   } ()
  coerce′ {A = univ _  } {π _ _   } ()
  coerce′ {A = univ _  } {list _  } ()
  coerce′ {A = univ _  } {tele _  } ()
  coerce′ {A = univ _  } {rose _ _} ()
  coerce′ {A = σ _ _   } {bot     } ()
  coerce′ {A = σ _ _   } {top     } ()
  coerce′ {A = σ _ _   } {unit    } ()
  coerce′ {A = σ _ _   } {nat     } ()
  coerce′ {A = σ _ _   } {univ _  } ()
  coerce′ {A = σ _ _   } {π _ _   } ()
  coerce′ {A = σ _ _   } {list _  } ()
  coerce′ {A = σ _ _   } {tele _  } ()
  coerce′ {A = σ _ _   } {rose _ _} ()
  coerce′ {A = π _ _   } {bot     } ()
  coerce′ {A = π _ _   } {top     } ()
  coerce′ {A = π _ _   } {unit    } ()
  coerce′ {A = π _ _   } {nat     } ()
  coerce′ {A = π _ _   } {univ _  } ()
  coerce′ {A = π _ _   } {σ _ _   } ()
  coerce′ {A = π _ _   } {list _  } ()
  coerce′ {A = π _ _   } {tele _  } ()
  coerce′ {A = π _ _   } {rose _ _} ()
  coerce′ {A = list _  } {bot     } ()
  coerce′ {A = list _  } {top     } ()
  coerce′ {A = list _  } {unit    } ()
  coerce′ {A = list _  } {nat     } ()
  coerce′ {A = list _  } {univ _  } ()
  coerce′ {A = list _  } {σ _ _   } ()
  coerce′ {A = list _  } {π _ _   } ()
  coerce′ {A = list _  } {tele _  } ()
  coerce′ {A = list _  } {rose _ _} ()
  coerce′ {A = tele _  } {bot     } ()
  coerce′ {A = tele _  } {top     } ()
  coerce′ {A = tele _  } {unit    } ()
  coerce′ {A = tele _  } {nat     } ()
  coerce′ {A = tele _  } {univ _  } ()
  coerce′ {A = tele _  } {σ _ _   } ()
  coerce′ {A = tele _  } {π _ _   } ()
  coerce′ {A = tele _  } {list _  } ()
  coerce′ {A = tele _  } {rose _ _} ()
  coerce′ {A = rose _ _} {bot     } ()
  coerce′ {A = rose _ _} {top     } ()
  coerce′ {A = rose _ _} {unit    } ()
  coerce′ {A = rose _ _} {nat     } ()
  coerce′ {A = rose _ _} {univ _  } ()
  coerce′ {A = rose _ _} {σ _ _   } ()
  coerce′ {A = rose _ _} {π _ _   } ()
  coerce′ {A = rose _ _} {list _  } ()
  coerce′ {A = rose _ _} {tele _  } ()
    -- generated by http://ideone.com/AYlShA

  coerceTele : {A₁ A₂ : Type} -> ⟦ A₁ ≃ A₂ ⟧ -> Tele ⟦ A₁ ⟧ -> Tele ⟦ A₂ ⟧
  coerceTele q (ret x)   = ret (coerce′ q x)
  coerceTele q (pi  A k) = pi  A λ x -> coerceTele q (k x)

  coerceFold : ∀ {k₁ k₂} {A₁ A₂ : Type} {B₁ : ⟦ A₁ ⟧ -> Univ k₁} {B₂ : ⟦ A₂ ⟧ -> Univ k₂} {t₂}
             -> ∀ t₁
             -> ⟦ B₁ ≅ B₂ ⟧
             -> ⟦ t₁ ≅ t₂ ⟧
             -> Fold (λ x -> ⟦ B₁ x ⟧) t₁
             -> Fold (λ x -> ⟦ B₂ x ⟧) t₂
  coerceFold {t₂ = ret x₂   } (ret x₁   ) qB qx y = coerce (qB x₁ x₂ qx) y
  coerceFold {t₂ = pi  A₂ k₂} (pi  A₁ k₁) qB qt f =
    λ x -> let qA , qk = qt ; qA′ = sym A₁ {A₂} qA ; x′ = coerce qA′ x in
      coerceFold (k₁ x′) qB (qk x′ x (sym x (coherence qA′ x))) (f x′)
  coerceFold {t₂ = pi  _ _  } (ret _    ) qB () f
  coerceFold {t₂ = ret _    } (pi  _ _  ) qB () f

  coerceAll : ∀ {k₁ k₂} {A₁ A₂ : Type} {B₁ : ⟦ A₁ ⟧ -> Univ k₁} {B₂ : ⟦ A₂ ⟧ -> Univ k₂} {xs₁ xs₂}
            -> ⟦ B₁ ≅ B₂ ⟧
            -> ⟦ xs₁ ≅ xs₂ ⟧
            -> All (Fold (λ x -> ⟦ B₁ x ⟧)) xs₁
            -> All (Fold (λ x -> ⟦ B₂ x ⟧)) xs₂
  coerceAll {xs₂ = []   } qB qxs  []                 = []
  coerceAll {xs₂ = _ ∷ _} qB qxs (_∷_ {x = t₁} f fs) = let qt , qxs' = qxs in
    coerceFold t₁ qB qt f ∷ coerceAll qB qxs' fs
  coerceAll {xs₂ = _ ∷ _} qB ()   []
  coerceAll {xs₂ = []   } qB ()  (_ ∷ _)

  coerceExtend : ∀ {I₁ I₂} {cs₁ : Desc I₁} {cs₂ : Desc I₂} {i₁ i₂} {t₂}
               -> ∀ t₁
               -> ⟦ t₁ ≅ t₂ ⟧
               -> ⟦ rose cs₁ i₁ ≅ rose cs₂ i₂ ⟧
               -> Extend (Rose cs₁) i₁ t₁
               -> Extend (Rose cs₂) i₂ t₂
  coerceExtend {t₂ = ret p₂   } (ret p₁   )  qt qr p =
    let t₁ , i₁ = p₁ ; t₂ , i₂ = p₂ ; qp₁ , qp₂ = qt ; qcs , qi = qr ; a , q₃ = p in
      coerceAll (λ x₁ x₂ q -> qcs , sym x₁ q) qp₁ a , right i₁ qp₂ (left i₁ q₃ qi)
  coerceExtend {t₂ = pi  A₂ k₂} (pi  A₁ k₁)  qt qr e =
    let qA , qk = qt ; x , e' = e ; x′ = coerce qA x in
      x′ , coerceExtend (k₁ x) (qk x x′ (coherence qA x)) qr e'
  coerceExtend {t₂ = pi  A₂ k₂} (ret p₁   )  () qr e
  coerceExtend {t₂ = ret p₂   } (pi  A₁ k₁)  () qr e

  coerceChilds : ∀ {I₁ I₂} {cs₁ ds₁ : Desc I₁} {cs₂ ds₂ : Desc I₂} {i₁ i₂}
               -> ⟦ rose cs₁ i₁ ≅ rose cs₂ i₂ ⟧
               -> ⟦ rose ds₁ i₁ ≅ rose ds₂ i₂ ⟧
               -> Childs cs₁ ds₁ i₁
               -> Childs cs₂ ds₂ i₂
  coerceChilds {ds₂ = _ ∷ _} {i₂} {i₁} qc  qd      (here {x = t₁} e) =
    here (coerceExtend t₁ (proj₁ (proj₁ qd)) qc e)
  coerceChilds {ds₂ = _ ∷ _}           qc  qd      (there a)         =
    let (_ , q₁) , q₂ = qd in there (coerceChilds qc (q₁ , q₂) a)
  coerceChilds {ds₂ = []   }           qc (() , _) (here  _)
  coerceChilds {ds₂ = []   }           qc (() , _) (there _)

  coerceRose : ∀ {I₁ I₂} {cs₁ : Desc I₁} {cs₂ : Desc I₂} {i₁ i₂}
             -> ⟦ rose cs₁ i₁ ≅ rose cs₂ i₂ ⟧ -> Rose cs₁ i₁ -> Rose cs₂ i₂
  coerceRose q (node chs) = node (coerceChilds q q chs)

  postulate
    refl      : ∀ {k} {A : Univ k} -> (x : ⟦ A ⟧) -> ⟦ x ≅ x ⟧
    coherence : ∀ {k s} {A : Univ k} {B : Univ s}
              -> (q : ⟦ A ≈ B ⟧) -> (x : ⟦ A ⟧) -> ⟦ x ≅ coerce q x ⟧
    cong-≅z   : ∀ {k s t} {A : Univ k} {B : Univ s} {C : Univ t}
              -> (x : ⟦ A ⟧) {y : ⟦ B ⟧} {z : ⟦ C ⟧} -> (q : ⟦ x ≅ y ⟧) -> ⟦ (x ≅ z) ≈ (y ≅ z)⟧
    huip      : ∀ {k s} {A : Univ k} {B : Univ s}
              -> (x : ⟦ A ⟧) {y : ⟦ B ⟧} -> (q : ⟦ x ≅ y ⟧) -> ⟦ refl x ≅ q ⟧

  right : ∀ {k s t} {A : Univ k} {B : Univ s} {C : Univ t}
        -> (x : ⟦ A ⟧) {y : ⟦ B ⟧} {z : ⟦ C ⟧} -> ⟦ x ≅ y ⟧ -> ⟦ x ≅ z ⟧ -> ⟦ y ≅ z ⟧
  right x q₁ = proj₁ (cong-≅z x q₁)

  trans : ∀ {k s t} {A : Univ k} {B : Univ s} {C : Univ t}
        -> (x : ⟦ A ⟧) {y : ⟦ B ⟧} {z : ⟦ C ⟧} -> ⟦ x ≅ y ⟧ -> ⟦ y ≅ z ⟧ -> ⟦ x ≅ z ⟧
  trans x {y} q₁ = proj₂ (cong-≅z x q₁)

  sym : ∀ {k s} {A : Univ k} {B : Univ s}
      -> (x : ⟦ A ⟧) {y : ⟦ B ⟧} -> ⟦ x ≅ y ⟧ -> ⟦ y ≅ x ⟧
  sym x q = right x q (refl x)

  left : ∀ {k s t} {A : Univ k} {B : Univ s} {C : Univ t}
       -> (x : ⟦ A ⟧) {y : ⟦ B ⟧} {z : ⟦ C ⟧} -> ⟦ x ≅ y ⟧ -> ⟦ z ≅ y ⟧ -> ⟦ x ≅ z ⟧
  left x {z = z} q₁ q₂ = trans x q₁ (sym z q₂)

subst : ∀ {k s} {A : Univ k} {x y} -> (P : ⟦ A ⟧ -> Univ s) -> ⟦ x ≅ y ⇒ P x ⇒ P y ⟧
subst P q = coerce (refl P _ _ q)

subst₂ : ∀ {k s t} {A : Univ k} {B : ⟦ A ⟧ -> Univ s} {i j} {x : ⟦ B i ⟧} {y : ⟦ B j ⟧}
       -> (P : ∀ x -> ⟦ B x ⟧ -> Univ t) -> ⟦ i ≅ j ⇒ x ≅ y ⇒ P i x ⇒ P j y ⟧
subst₂ P q₁ q₂ = coerce (refl P _ _ q₁ _ _ q₂)

J : ∀ {k s} {A : Univ k} {x y : ⟦ A ⟧}
  -> (P : (y : ⟦ A ⟧) -> ⟦ x ≅ y ⟧ -> Univ s)
  -> ⟦ P _ (refl x) ⟧
  -> (q : ⟦ x ≅ y ⟧)
  -> ⟦ P _ q ⟧
J {x = x} P z q = subst₂ P q (huip x q) z
